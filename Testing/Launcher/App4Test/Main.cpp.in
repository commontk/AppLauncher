
// Library includes
@LIB_INCLUDES@

// STD includes
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <string>

#ifdef _WIN32
#include <direct.h>
#include <windows.h>
#include <algorithm>
inline void sleepMs(unsigned int ms)
{
    ::Sleep(ms);
}
inline std::string currentWorkingDirectory()
{
  char * currentPath = _getcwd(NULL, 0);
  std::string currentPathAsStr;
  if (currentPath)
    {
    currentPathAsStr = std::string(currentPath);
    free(currentPath);
    }
  std::replace(currentPathAsStr.begin(), currentPathAsStr.end(), '\\', '/');
  return currentPathAsStr;
}
#else
#include <unistd.h>
inline void sleepMs(unsigned int ms)
{
    static const unsigned MilliToMicro = 1000;
    ::usleep(ms * MilliToMicro);
}
inline std::string currentWorkingDirectory()
{
  char * currentPath = getcwd(NULL, 0);
  std::string currentPathAsStr;
  if (currentPath)
    {
    currentPathAsStr = std::string(currentPath);
    free(currentPath);
    }
  return currentPathAsStr;
}
#endif

int check_env_var(const char* varname, const char* expected_value)
{
  char * varStr = getenv(varname);
  if (!varStr)
    {
    std::cout << "Failed to retrieve '" << varname << "' env. variable !" << std::endl;
    return EXIT_FAILURE;
    }
  std::string var(varStr);
  std::string expectedVar(expected_value);
  if (var != expectedVar)
    {
    std::cout << "Failed to load the saved environment:"
              << "\n\texpected: " << expectedVar
              << "\n\t current: " << var
              << std::endl;
    return EXIT_FAILURE;
    }
  return EXIT_SUCCESS;
}

int check_unexpected_env_var(const char* varname)
{
  char * varStr = getenv(varname);
  if (varStr)
    {
    std::cout << "Environment variable '" << varname << "' with value [" << varStr << "] is unexpected !" << std::endl;
    return EXIT_FAILURE;
    }
  return EXIT_SUCCESS;
}

void display_arguments(std::ostream& stream, int argc, char* argv[])
{
  // Since tests are expecting the argument to be displayed as ""Argument passed: [arg1 [...]]", changing
  // the following may require to update the tests.
  stream << "Argument passed:";
  if (argc >= 2)
    {
    stream << argv[1]; // argName
    }
  for(int idx=2; idx < argc; idx++)
    {
    stream << " " << argv[idx];
    }
  stream << std::endl;
}

int main(int argc, char** argv)
{
  //std::cout << "Hello World !" << std::endl;

  bool verboseLibInstantiation = true;

  if (argc > 1)
    {
    std::string argName(argv[1]);
    if (argName == "--foo")
      {
      std::cout << "Argument count: " << argc << " - ";
      display_arguments(std::cout, argc, argv);
      }
    else if (argName == "--test-timeout")
      {
      int timeout = 3;
      std::cout << "App4Test will exit in " << timeout
                << " seconds with error_code=" << timeout << std::endl;
      sleepMs(timeout * 1000);

      // Generate filename
      std::string filename(argv[0]);
      filename += "-timeout.txt";

      // Create file argv[0]-timeout.txt
      std::ofstream timeoutFile;
      timeoutFile.open (filename.c_str());
      timeoutFile << timeout << "\n";
      timeoutFile.close();
      std::cout << "Generated: " << filename << std::endl;
      return timeout;
      }
    else if (argName == "--forever")
      {
      std::cout << "App4Test - Forever" << std::endl;
      while(true){}
      }
    else if (argName == "--check-path")
      {
      char * path = getenv("PATH");
      std::cout << "PATH=" << (path ? path : "NULL") << std::endl;
      }
    else if (argName == "--check-env")
      {
      std::cout << std::endl;
      char * env1 = getenv("SOMETHING_NICE");
      std::cout << "SOMETHING_NICE=" << (env1 ? env1 : "NULL") << std::endl;
      char * env2 = getenv("SOMETHING_AWESOME");
      std::cout << "SOMETHING_AWESOME=" << (env2 ? env2 : "NULL") << std::endl;
      char * env3 = getenv("SOMETHING_GREAT");
      std::cout << "SOMETHING_GREAT=" << (env3 ? env3 : "NULL") << std::endl;
      char * env4 = getenv("SOME_PATH");
      std::cout << "SOME_PATH=" << (env4 ? env4 : "NULL") << std::endl;
      }
    else if (argName == "--print-current-working-directory")
      {
      std::cout << "currentWorkingDirectory=" << currentWorkingDirectory() << std::endl;
      }
    else if (argName == "--print-hello-world")
      {
      std::cout << "Hello world !" << std::endl;
      }
    else if (argName == "--exit-failure")
      {
      std::cout << "Exit failure !" << std::endl;
      return EXIT_FAILURE;
      }
    else if (argName == "--long-help")
      {
      verboseLibInstantiation = false;
      std::cout << "This is the long help" << std::endl;
      }
    else if (argName == "-sh")
      {
      verboseLibInstantiation = false;
      std::cout << "This is the short help" << std::endl;
      }
    else if (argName == "--check-environment-load")
      {
      verboseLibInstantiation = false;
      if (check_env_var(
            /* varname= */ "VAR_FOR_ENV_LOAD_TEST",
            /* expected_value= */ "set-from-level-0") != EXIT_SUCCESS)
        {
        return EXIT_FAILURE;
        }
      if (check_env_var(
            /* varname= */ "VAR_FROM_SETTINGS",
            /* expected_value= */ "set-from-settings") != EXIT_SUCCESS)
        {
        return EXIT_FAILURE;
        }

      // Check that the loaded environment is also saved
      if (check_unexpected_env_var(
            /* varname= */ "APPLAUNCHER_LEVEL") != EXIT_SUCCESS)
        {
        return EXIT_FAILURE;
        }
      }
    else if (argName == "--check-environment-load-level1")
      {
      verboseLibInstantiation = false;
      if (check_env_var(
            /* varname= */ "VAR_FOR_ENV_LOAD_TEST",
            /* expected_value= */ "set-from-level-1") != EXIT_SUCCESS)
        {
        return EXIT_FAILURE;
        }
      if (check_env_var(
            /* varname= */ "VAR_FROM_SETTINGS",
            /* expected_value= */ "set-from-settings") != EXIT_SUCCESS)
        {
        return EXIT_FAILURE;
        }
      // Check that the loaded environment is also saved
      if (check_env_var(
            /* varname= */ "APPLAUNCHER_LEVEL",
            /* expected_value= */ "1") != EXIT_SUCCESS)
        {
        return EXIT_FAILURE;
        }
      }
    }
  else if (argc == 1)
    {
    std::cout << "No argument provided" << std::endl;
    }

  // Instanciate library objects
@LIB_INSTANCIATES@

  return EXIT_SUCCESS;
}
